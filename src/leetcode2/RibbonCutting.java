package leetcode2;

import java.util.*;
import java.util.stream.Collectors;

public class RibbonCutting {

    public static void main(String[] args) {
        RibbonCutting ribbonCutting = new RibbonCutting();
        System.out.println(ribbonCutting.maxLength2(new int[]{70185, 16644, 13869, 98664, 43571, 65731, 29534, 30029, 68340, 9562, 74700, 43707, 91902, 45537, 28932, 59860, 86868, 38618, 28076, 52331, 26727, 28738, 95934, 31726, 64511, 197, 86004, 94526, 51013, 91944, 54948, 75472, 79827, 88510, 9236, 34857, 42356, 68538, 59060, 28738, 79757, 50277, 44185, 94657, 25470, 80927, 25020, 9301, 24846, 41547, 36178, 28651, 87774, 50841, 48918, 75292, 49338, 19407, 60735, 19574, 99390, 26343, 89463, 2879, 46669, 16536, 93964, 30070, 14526, 57925, 23401, 97566, 78376, 90182, 36133, 81140, 35184, 74311, 56826, 56284, 96833, 87944, 59785, 99545, 39830, 49081, 86742, 50069, 3050, 1137, 12960, 6537, 75096, 33348, 49808, 32439, 98019, 6680, 6392, 359, 19312, 92983, 30160, 51420, 45465, 91334, 36158, 33528, 87306, 76394, 78356, 16179, 98502, 15406, 65172, 63242, 18375, 39165, 46147, 28130, 67116, 84960, 77848, 32766, 35874, 74506, 63695, 70878, 80386, 38968, 83144, 2090, 17044, 66809, 56063, 1555, 32982, 80111, 34637, 8831, 56211, 36114, 6997, 32429, 4068, 2342, 27287, 54173, 59256, 42727, 18547, 53176, 33080, 24970, 14609, 49599, 69444, 90203, 22714, 58165, 35723, 34601, 14215, 88934, 77141, 85762, 87500, 35785, 75956, 88923, 98511, 65573, 9577, 36854, 42799, 36835, 63349, 33008, 4270, 598, 72602, 83822, 47956, 25373, 68043, 38941, 1286, 13032, 98827, 21171, 12004, 77258, 97672, 35386, 5264, 67425, 37564, 28723, 16973, 97777, 11853, 62551, 45527, 10967, 34022, 22420, 96921, 3159, 37983, 79697, 43836, 80974, 28694, 75431, 7068, 98854, 90123, 9470, 22663, 84037, 33754, 30041, 72983, 35243, 32912, 6684, 99091, 33610, 50287, 39048, 33350, 16467, 93522, 20018, 28909, 63613, 96426, 89689, 59486, 54924, 46442, 30068, 78787, 40010, 48750, 50230, 44966, 15664, 90232, 89933, 44193, 94102, 7049, 76035, 27661, 33729, 27732, 76604, 12563, 5525, 27824, 65172, 72121, 57219, 27925, 34251, 81328, 98532, 29109, 21355, 38334, 68869, 97904, 57622, 52465, 22691, 47016, 48055, 85425, 1363, 86000, 1989, 28390, 6808, 5278, 87226, 51879, 84039, 40711, 57671, 32051, 88927, 21227, 13102, 67898, 8020, 9467, 63051, 98859, 71925, 26204, 62148, 79766, 44956, 53036, 29234, 33720, 86506, 28368, 86066, 97274, 40128, 1637, 31981, 75812, 84005, 87408, 78114, 69243, 20478, 52562, 48920, 27765, 70250, 53790, 27625, 42460, 74347, 15367, 8447, 82440, 41773, 11181, 37417, 69485, 50071, 39977, 74303, 80451, 12600, 43250, 23562, 44441, 87692, 35589, 24039, 78358, 81442, 18197, 40040, 4743, 16673, 94099, 87288, 21059, 32756, 18640, 44823, 10604, 62389, 54487, 15038, 41362, 38405, 19864, 80530, 60609, 17938, 86444, 46196, 56186, 80148, 36985, 53234, 10169, 3836, 46666, 79690, 88376, 65341, 29750, 99485, 84540, 53758, 78112, 20930, 87809, 53531, 50935, 6950, 70920, 51686, 57168, 80856, 4807, 40500, 20231, 64701, 87965, 75695, 27597, 87109, 25141, 21113, 62254, 37732, 26740, 51326, 28877, 48343, 64255, 39150, 37070, 36424, 205, 5366, 90736, 29226, 39243, 87590, 51803, 4382, 41899, 4934, 48055, 57201, 93393, 70968, 82514, 20359, 32811, 53092, 67888, 20500, 34088, 56549, 14770, 23009, 40870, 81131, 48372, 2437, 39194, 66289, 74287, 71870, 5117, 95248, 19053, 69248, 94319, 57499, 4900, 69123, 67166, 71990, 49303, 25342, 54317, 5098, 55855, 26331, 20010, 51349, 73166, 73404, 33509, 30156, 54957, 47033, 28174, 15267, 74321, 71934, 27291, 8358, 973, 5187, 34862, 13918, 26630, 92158, 73827, 34309, 80853, 89186, 71609, 8085, 21853, 83260, 95809, 29291, 48782, 55484, 77054, 11544, 59244, 84734, 23394, 91063, 92799, 1065, 63608, 40199, 91472, 63469, 23849, 26180, 63823, 66057, 99635, 96321, 65008, 24811, 1714, 72997, 39215, 56696, 31131, 85550, 22082, 7133, 12689, 16703, 58141, 87483, 46739, 31646, 45369, 47933, 78910, 18387, 67881, 37911, 80629, 59948, 22877, 80950, 6527, 24809, 62616, 31028, 67693, 44550, 4687, 4327, 12157, 91232, 47888, 9519, 53655, 8555, 21622, 64933, 40040, 97731, 84247, 52018, 41339, 19185, 92186, 81420, 81550, 51614, 19535, 88205, 66307, 59236, 1303, 75128, 67783, 20165, 91822, 77951, 16136, 99525, 29011, 23507, 5477, 26968, 43057, 599, 89402, 80307, 55630, 80303, 18818, 48199, 6859, 28886, 55905, 4303, 89112, 84869, 73075, 981, 21339, 10338, 57139, 11663, 18200, 18465, 92537, 22085, 66429, 56026, 85609, 64718, 37371, 46593, 69615, 91572, 71305, 8916, 89677, 45485, 34489, 18420, 17481, 17216, 94043, 73007, 6698, 11420, 33114, 31567, 58369, 97762, 92701, 84597, 97236, 25952, 7004, 47978, 38711, 42503, 85262, 93097, 94481, 42097, 48142, 75335, 56958, 10545, 36017, 36540, 27644, 77206, 39500, 84206, 70253, 11657, 46303, 72200, 37919, 66243, 98481, 40476, 87342, 43899, 80557, 49433, 50265, 69570, 54625, 30861, 56852, 43781, 17136, 97200, 94399, 63197, 76476, 13797, 51168, 3771, 28790, 57316, 93980, 61868, 70782, 38518, 29349, 54464, 50760, 45886, 26093, 1342, 63406, 1365, 61167, 60115, 65855, 50561, 67172, 66014, 37051, 40307, 71357, 11264, 93593, 79067, 92879, 9537, 5683, 49240, 87, 12374, 27271, 30832, 16679, 20864, 34627, 50026, 28234, 78636, 86159, 33935, 68200, 74340, 643, 81679, 83949, 64514, 85665, 70399, 9877, 55528, 43729, 21138, 26355, 79972, 87847, 91936, 77811, 52762, 91281, 82681, 17443, 2200, 23040, 5207, 64866, 55015, 47406, 2261, 555, 51457, 27454, 22116, 81910, 84574, 85610, 52229, 65152, 49220, 95267, 93914, 43225, 98937, 16938, 56482, 91776, 86934, 58500, 63431, 62553, 65335, 14262, 57081, 764, 86053, 22130, 32532, 33788, 36952, 65966, 34017, 14922, 90174, 34107, 57602, 36470, 39412, 13813, 25910, 19549, 91004, 81196, 43278, 45140, 44116, 17678, 88104, 42215, 28850, 36736, 92447, 81777, 13834, 27217, 66454, 90783, 4283, 81181, 95006, 5661, 61566, 12436, 75246, 84817, 23500, 19285, 74069, 94364, 6236, 54793, 67410, 82897, 561, 75459, 99483, 69483, 44379, 87111, 9836, 99392, 78097, 93689, 55856, 16157, 59795, 48538, 60768, 14672, 93347, 17400, 22463, 25834, 76944, 16528, 97903, 73373, 83994, 3417, 13153, 28596, 57145, 50094, 48045, 56541, 57580, 32787, 12176, 67025, 81961, 83352, 69170, 33662, 21630, 53126, 96758, 2494, 64593, 43590, 4815, 84424, 22102, 27368, 67523, 56181, 53709, 5760, 975, 82071, 56978, 88258, 90586, 22916, 19876, 73695, 26009, 31822, 51085, 88044, 77514, 81556, 8627, 90745, 42676, 36909, 24148, 82188, 58831, 62580, 93372}, 492));
    }

    public int maxLength(int[] ribbons, int k) {
        PriorityQueue<int[]> queue = new PriorityQueue<>();
        List<int[]> groupsList = new ArrayList<>();
        int[][] x = groupsList.toArray(new int[0][0]);
        int[] land = new int[2];
        Arrays.copyOf(land, land.length);
        int n = ribbons.length;
        int start = 1;
        int end = 0;
        Arrays.sort(x, (c1, c2) -> {
            if(c1[0] == c2[0]){
                return Integer.compare(c1[1], c2[1]);
            }else {
                return Integer.compare(c1[0], c2[0]);
            }
        });
        for (int ribbon : ribbons) end = Math.max(end, ribbon);
        PriorityQueue<int[]> toBeFreeOccupiedChairs1 = new PriorityQueue<>((c1,c2)->c1[0]-c2[0]);

        PriorityQueue<int[]> toBeFreeOccupiedChairs = new PriorityQueue<>((c1,c2)->c1[0]-c2[0]);
        toBeFreeOccupiedChairs.addAll(toBeFreeOccupiedChairs1);

        int ribbonSegmentCutMaxLength = 0;

        while (end >= start) {

            int mid = start + (end - start) / 2;

            int ribbonSegmnetCut = 0;

            for (int ribbon : ribbons) {
                ribbonSegmnetCut += (ribbon / mid);
            }

            if (ribbonSegmnetCut >= k) {
                ribbonSegmentCutMaxLength = mid;
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return ribbonSegmentCutMaxLength;
    }

    public int maxLength2(int[] ribbons, int k) {
        Arrays.sort(ribbons);
        System.out.println("After sort:" + ribbons.length + "," + Arrays.toString(ribbons));
        int low = 1;
        int high = Arrays.stream(ribbons).max().getAsInt();
        int mid = (low + high) / 2;
        int maxLength = 0;
        System.out.println("low, high, mid, sum:" + low + "," + high + "," + mid);
        while (low <= high) {
            mid = (low + high) / 2;
            //mid = low + (high - low) / 2;
            final int midVal = mid;
            int pieces = midVal == 0 ? 0 : Arrays.stream(ribbons).map(i -> i / midVal).sum();
            System.out.println("low, high, mid, pieces:" + low + "," + high + "," + mid + "," + pieces);
            if (pieces < k) {
                high = mid - 1;
                System.out.println("high=" + high);
            } else if (pieces >= k) {
                low = mid + 1;
                maxLength = mid;
                System.out.println("low=" + low);
            }
        }
        System.out.println("result=" + maxLength);
        return maxLength;

    }
}